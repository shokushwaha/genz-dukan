import axios from "axios";
import { createContext, useEffect, useState } from "react";
import Web3Modal from "web3modal";
import { ethers } from "ethers";
export const CartContext = createContext({});


import { useRouter } from "next/navigation";

const abi = {
    "_format": "hh-sol-artifact-1",
    "contractName": "FungibleToken",
    "sourceName": "contracts/FungibleToken.sol",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "name",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "symbol",
                    "type": "string"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "internalType": "uint8",
                    "name": "",
                    "type": "uint8"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "subtractedValue",
                    "type": "uint256"
                }
            ],
            "name": "decreaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "user",
                    "type": "address"
                }
            ],
            "name": "getUserTokenCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "user",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getUserTokenDetails",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                },
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "spender",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "addedValue",
                    "type": "uint256"
                }
            ],
            "name": "increaseAllowance",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "recipient",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "internalType": "string",
                    "name": "tokenName",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "tokenSymbol",
                    "type": "string"
                }
            ],
            "name": "mint",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "userTokenDetails",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "internalType": "string",
                    "name": "tokenName",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "tokenSymbol",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "bytecode": "0x60806040523480156200001157600080fd5b50604051620012bb380380620012bb8339810160408190526200003491620001f4565b8151829082906200004d90600390602085019062000081565b5080516200006390600490602084019062000081565b5050600580546001600160a01b03191633179055506200029b915050565b8280546200008f906200025e565b90600052602060002090601f016020900481019282620000b35760008555620000fe565b82601f10620000ce57805160ff1916838001178555620000fe565b82800160010185558215620000fe579182015b82811115620000fe578251825591602001919060010190620000e1565b506200010c92915062000110565b5090565b5b808211156200010c576000815560010162000111565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014f57600080fd5b81516001600160401b03808211156200016c576200016c62000127565b604051601f8301601f19908116603f0116810190828211818310171562000197576200019762000127565b81604052838152602092508683858801011115620001b457600080fd5b600091505b83821015620001d85785820183015181830184015290820190620001b9565b83821115620001ea5760008385830101525b9695505050505050565b600080604083850312156200020857600080fd5b82516001600160401b03808211156200022057600080fd5b6200022e868387016200013d565b935060208501519150808211156200024557600080fd5b5062000254858286016200013d565b9150509250929050565b600181811c908216806200027357607f821691505b602082108114156200029557634e487b7160e01b600052602260045260246000fd5b50919050565b61101080620002ab6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638aa162dc11610097578063a9059cbb11610066578063a9059cbb14610233578063b8a6f40214610246578063da06e08c1461026f578063dd62ed3e1461028257600080fd5b80638aa162dc146101cb5780638da5cb5b146101ed57806395d89b4114610218578063a457c2d71461022057600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a5780636d0136181461018d57806370a08231146101a257600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d610295565b60405161011a9190610d19565b60405180910390f35b610136610131366004610d4f565b610327565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610d79565b61033f565b6040516012815260200161011a565b610136610188366004610d4f565b610363565b6101a061019b366004610e58565b610385565b005b61014a6101b0366004610ee0565b6001600160a01b031660009081526020819052604090205490565b6101de6101d9366004610d4f565b610419565b60405161011a93929190610efb565b600554610200906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b61010d610570565b61013661022e366004610d4f565b61057f565b610136610241366004610d4f565b6105ff565b61014a610254366004610ee0565b6001600160a01b031660009081526006602052604090205490565b6101de61027d366004610d4f565b61060d565b61014a610290366004610f30565b610807565b6060600380546102a490610f63565b80601f01602080910402602001604051908101604052809291908181526020018280546102d090610f63565b801561031d5780601f106102f25761010080835404028352916020019161031d565b820191906000526020600020905b81548152906001019060200180831161030057829003601f168201915b5050505050905090565b600033610335818585610832565b5060019392505050565b60003361034d858285610956565b6103588585856109d0565b506001949350505050565b6000336103358185856103768383610807565b6103809190610f9e565b610832565b61038f8585610b74565b6001600160a01b03851660009081526006602090815260408083208151606081018352878152808401878152928101869052815460018181018455928652948490208151600390960201948555915180519294936103f39392850192910190610c33565b506040820151805161040f916002840191602090910190610c33565b5050505050505050565b6006602052816000526040600020818154811061043557600080fd5b90600052602060002090600302016000915091505080600001549080600101805461045f90610f63565b80601f016020809104026020016040519081016040528092919081815260200182805461048b90610f63565b80156104d85780601f106104ad576101008083540402835291602001916104d8565b820191906000526020600020905b8154815290600101906020018083116104bb57829003601f168201915b5050505050908060020180546104ed90610f63565b80601f016020809104026020016040519081016040528092919081815260200182805461051990610f63565b80156105665780601f1061053b57610100808354040283529160200191610566565b820191906000526020600020905b81548152906001019060200180831161054957829003601f168201915b5050505050905083565b6060600480546102a490610f63565b6000338161058d8286610807565b9050838110156105f25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6103588286868403610832565b6000336103358185856109d0565b6001600160a01b038216600090815260066020526040812054606090819084106106795760405162461bcd60e51b815260206004820152601960248201527f546f6b656e20696e646578206f7574206f6620626f756e64730000000000000060448201526064016105e9565b6001600160a01b03851660009081526006602052604081208054869081106106a3576106a3610fc4565b9060005260206000209060030201604051806060016040529081600082015481526020016001820180546106d690610f63565b80601f016020809104026020016040519081016040528092919081815260200182805461070290610f63565b801561074f5780601f106107245761010080835404028352916020019161074f565b820191906000526020600020905b81548152906001019060200180831161073257829003601f168201915b5050505050815260200160028201805461076890610f63565b80601f016020809104026020016040519081016040528092919081815260200182805461079490610f63565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b505050919092525050815160208301516040909301519099929850965090945050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166108945760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105e9565b6001600160a01b0382166108f55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105e9565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006109628484610807565b905060001981146109ca57818110156109bd5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105e9565b6109ca8484848403610832565b50505050565b6001600160a01b038316610a345760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105e9565b6001600160a01b038216610a965760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105e9565b6001600160a01b03831660009081526020819052604090205481811015610b0e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105e9565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36109ca565b6001600160a01b038216610bca5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105e9565b8060026000828254610bdc9190610f9e565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b828054610c3f90610f63565b90600052602060002090601f016020900481019282610c615760008555610ca7565b82601f10610c7a57805160ff1916838001178555610ca7565b82800160010185558215610ca7579182015b82811115610ca7578251825591602001919060010190610c8c565b50610cb3929150610cb7565b5090565b5b80821115610cb35760008155600101610cb8565b6000815180845260005b81811015610cf257602081850181015186830182015201610cd6565b81811115610d04576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610d2c6020830184610ccc565b9392505050565b80356001600160a01b0381168114610d4a57600080fd5b919050565b60008060408385031215610d6257600080fd5b610d6b83610d33565b946020939093013593505050565b600080600060608486031215610d8e57600080fd5b610d9784610d33565b9250610da560208501610d33565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610ddc57600080fd5b813567ffffffffffffffff80821115610df757610df7610db5565b604051601f8301601f19908116603f01168101908282118183101715610e1f57610e1f610db5565b81604052838152866020858801011115610e3857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215610e7057600080fd5b610e7986610d33565b94506020860135935060408601359250606086013567ffffffffffffffff80821115610ea457600080fd5b610eb089838a01610dcb565b93506080880135915080821115610ec657600080fd5b50610ed388828901610dcb565b9150509295509295909350565b600060208284031215610ef257600080fd5b610d2c82610d33565b838152606060208201526000610f146060830185610ccc565b8281036040840152610f268185610ccc565b9695505050505050565b60008060408385031215610f4357600080fd5b610f4c83610d33565b9150610f5a60208401610d33565b90509250929050565b600181811c90821680610f7757607f821691505b60208210811415610f9857634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610fbf57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052603260045260246000fdfea264697066735822122046f998f10974daad9496d678331addbf6586fc4dc84326d53bfecb20c83ac67e64736f6c634300080b0033",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638aa162dc11610097578063a9059cbb11610066578063a9059cbb14610233578063b8a6f40214610246578063da06e08c1461026f578063dd62ed3e1461028257600080fd5b80638aa162dc146101cb5780638da5cb5b146101ed57806395d89b4114610218578063a457c2d71461022057600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a5780636d0136181461018d57806370a08231146101a257600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d610295565b60405161011a9190610d19565b60405180910390f35b610136610131366004610d4f565b610327565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610d79565b61033f565b6040516012815260200161011a565b610136610188366004610d4f565b610363565b6101a061019b366004610e58565b610385565b005b61014a6101b0366004610ee0565b6001600160a01b031660009081526020819052604090205490565b6101de6101d9366004610d4f565b610419565b60405161011a93929190610efb565b600554610200906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b61010d610570565b61013661022e366004610d4f565b61057f565b610136610241366004610d4f565b6105ff565b61014a610254366004610ee0565b6001600160a01b031660009081526006602052604090205490565b6101de61027d366004610d4f565b61060d565b61014a610290366004610f30565b610807565b6060600380546102a490610f63565b80601f01602080910402602001604051908101604052809291908181526020018280546102d090610f63565b801561031d5780601f106102f25761010080835404028352916020019161031d565b820191906000526020600020905b81548152906001019060200180831161030057829003601f168201915b5050505050905090565b600033610335818585610832565b5060019392505050565b60003361034d858285610956565b6103588585856109d0565b506001949350505050565b6000336103358185856103768383610807565b6103809190610f9e565b610832565b61038f8585610b74565b6001600160a01b03851660009081526006602090815260408083208151606081018352878152808401878152928101869052815460018181018455928652948490208151600390960201948555915180519294936103f39392850192910190610c33565b506040820151805161040f916002840191602090910190610c33565b5050505050505050565b6006602052816000526040600020818154811061043557600080fd5b90600052602060002090600302016000915091505080600001549080600101805461045f90610f63565b80601f016020809104026020016040519081016040528092919081815260200182805461048b90610f63565b80156104d85780601f106104ad576101008083540402835291602001916104d8565b820191906000526020600020905b8154815290600101906020018083116104bb57829003601f168201915b5050505050908060020180546104ed90610f63565b80601f016020809104026020016040519081016040528092919081815260200182805461051990610f63565b80156105665780601f1061053b57610100808354040283529160200191610566565b820191906000526020600020905b81548152906001019060200180831161054957829003601f168201915b5050505050905083565b6060600480546102a490610f63565b6000338161058d8286610807565b9050838110156105f25760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6103588286868403610832565b6000336103358185856109d0565b6001600160a01b038216600090815260066020526040812054606090819084106106795760405162461bcd60e51b815260206004820152601960248201527f546f6b656e20696e646578206f7574206f6620626f756e64730000000000000060448201526064016105e9565b6001600160a01b03851660009081526006602052604081208054869081106106a3576106a3610fc4565b9060005260206000209060030201604051806060016040529081600082015481526020016001820180546106d690610f63565b80601f016020809104026020016040519081016040528092919081815260200182805461070290610f63565b801561074f5780601f106107245761010080835404028352916020019161074f565b820191906000526020600020905b81548152906001019060200180831161073257829003601f168201915b5050505050815260200160028201805461076890610f63565b80601f016020809104026020016040519081016040528092919081815260200182805461079490610f63565b80156107e15780601f106107b6576101008083540402835291602001916107e1565b820191906000526020600020905b8154815290600101906020018083116107c457829003601f168201915b505050919092525050815160208301516040909301519099929850965090945050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166108945760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016105e9565b6001600160a01b0382166108f55760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016105e9565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006109628484610807565b905060001981146109ca57818110156109bd5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016105e9565b6109ca8484848403610832565b50505050565b6001600160a01b038316610a345760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105e9565b6001600160a01b038216610a965760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105e9565b6001600160a01b03831660009081526020819052604090205481811015610b0e5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105e9565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36109ca565b6001600160a01b038216610bca5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016105e9565b8060026000828254610bdc9190610f9e565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b828054610c3f90610f63565b90600052602060002090601f016020900481019282610c615760008555610ca7565b82601f10610c7a57805160ff1916838001178555610ca7565b82800160010185558215610ca7579182015b82811115610ca7578251825591602001919060010190610c8c565b50610cb3929150610cb7565b5090565b5b80821115610cb35760008155600101610cb8565b6000815180845260005b81811015610cf257602081850181015186830182015201610cd6565b81811115610d04576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610d2c6020830184610ccc565b9392505050565b80356001600160a01b0381168114610d4a57600080fd5b919050565b60008060408385031215610d6257600080fd5b610d6b83610d33565b946020939093013593505050565b600080600060608486031215610d8e57600080fd5b610d9784610d33565b9250610da560208501610d33565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610ddc57600080fd5b813567ffffffffffffffff80821115610df757610df7610db5565b604051601f8301601f19908116603f01168101908282118183101715610e1f57610e1f610db5565b81604052838152866020858801011115610e3857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215610e7057600080fd5b610e7986610d33565b94506020860135935060408601359250606086013567ffffffffffffffff80821115610ea457600080fd5b610eb089838a01610dcb565b93506080880135915080821115610ec657600080fd5b50610ed388828901610dcb565b9150509295509295909350565b600060208284031215610ef257600080fd5b610d2c82610d33565b838152606060208201526000610f146060830185610ccc565b8281036040840152610f268185610ccc565b9695505050505050565b60008060408385031215610f4357600080fd5b610f4c83610d33565b9150610f5a60208401610d33565b90509250929050565b600181811c90821680610f7757607f821691505b60208210811415610f9857634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610fbf57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052603260045260246000fdfea264697066735822122046f998f10974daad9496d678331addbf6586fc4dc84326d53bfecb20c83ac67e64736f6c634300080b0033",
    "linkReferences": {},
    "deployedLinkReferences": {}
}

const fetchContract = async (signerOrProvider) => {

    const web3Modal = new Web3Modal();
    const connection = await web3Modal.connect();
    const provider = new ethers.providers.Web3Provider(connection);
    const { chainId } = await provider.getNetwork();
    const ftContract = new ethers.Contract(
        "0x0264F907e859512504834a02D83D4249772cca0b",
        abi.abi,
        signerOrProvider
    );
    return ftContract;
};



const connectingWithSmartContract = async () => {
    try {
        const web3Modal = new Web3Modal();
        const connection = await web3Modal.connect();
        const provider = new ethers.providers.Web3Provider(connection);
        const signer = provider.getSigner();

        const contract = fetchContract(signer);
        return contract;
    } catch (error) {
        console.log(
            `Ran into an error while connecting to Smart Contract ${error}`
        );
    }
};




export function CartContextProvider({ children }) {

    const [loggedIn, setLoggedIn] = useState(false);
    const [loggedInUser, setLoggedInUser] = useState({});
    const ls = typeof window !== 'undefined' ? window.localStorage : null;
    const [showNavBar, setShowNavBar] = useState(true);
    const [cartProducts, setCartProducts] = useState([]);


    useEffect(() => {
        if (cartProducts?.length > 0) {
            ls?.setItem('cart', JSON.stringify(cartProducts));
        }
        if (ls) {
            const str = JSON.parse(ls.getItem('loggedIn'))
            if (str === 'true')
                setLoggedIn(true);
        }
        if (ls) {
            const user = JSON.parse(ls.getItem('loggedInUser'))
            setLoggedInUser(user);
        }



    }, [cartProducts]);

    const cart = loggedInUser?.data?.cart;
    let id = loggedInUser?.data?._id;

    useEffect(() => {
        if (ls && ls.getItem('cart')) {

            setCartProducts(JSON.parse(ls.getItem('cart')));
        }
        for (const i in cart) {
            if (!cartProducts.includes(i))
                cartProducts.push(i);
        }


    }, [])


    async function fetchUpdatedUserDetails() {
        if (ls) {
            const user = JSON.parse(ls.getItem('loggedInUser'))
            setLoggedInUser(user);
        }
    }

    async function addProduct(productId) {
        await axios.post('/api/addtocart', {
            id
            , productId
        });
        setCartProducts(prev => [...prev, productId]);


    }
    async function removeProduct(productId) {
        await axios.post('/api/removefromcart', {
            id
            , productId
        });
        setCartProducts(prev => {
            const pos = prev.indexOf(productId);
            if (pos !== -1) {
                return prev.filter((value, index) => index !== pos);
            }
            return prev;
        })
    }

    async function clearCart() {
        await axios.post('/api/clearcart', { id });
        ls.removeItem('cart');
        setCartProducts([]);
    }


    // blockchain functions
    const [success, setSuccess] = useState("");
    const [openSuccess, setOpenSuccess] = useState(false);
    const [error, setError] = useState("");
    const [openError, setOpenError] = useState(false);
    const [currentAccount, setCurrentAccount] = useState("");
    const router = useRouter();
    const [name, setName] = useState("hiii");
    const ConnectToWallet = async () => {
        try {
            if (!window.ethereum)
                return setOpenError(true), setError("Please, Install a Wallet");

            const accounts = await window.ethereum.request({
                method: "eth_accounts",
            });

            if (accounts.length) {
                setCurrentAccount(accounts[0]);
            } else {
                setError("Please connect to your account");
                setOpenError(true);
            }
        } catch (error) {
            setError("Wallet is not connected");
            setOpenError(true);
        }
    };

    const checkWalletNetwork = async () => {
        const web3Modal = new Web3Modal();
        const connection = await web3Modal.connect();
        const provider = new ethers.providers.Web3Provider(connection);

        const { chainId } = await provider.getNetwork();

        if (chainId === 31337 || chainId === 80001 || chainId === 5 || chainId === 1337) {
            return true;
        } else {
            return false;
        }
    };

    const connectWallet = async () => {
        try {
            if (!window.ethereum)
                return setOpenError(true), setError("Install MetaMask");

            const accounts = await window.ethereum.request({
                method: "eth_requestAccounts",
            });

            setCurrentAccount(accounts[0]);
            connectingWithSmartContract();

            setSuccess("Successfully Connected to Wallet");
            setOpenSuccess(true);
        } catch (error) {
            setError("Error while connecting to Wallet");
            setOpenError(true);
        }
    };



    return (
        <CartContext.Provider value={{ loggedIn, setLoggedIn, loggedInUser, fetchUpdatedUserDetails, setLoggedInUser, cartProducts, setCartProducts, addProduct, removeProduct, clearCart, ConnectToWallet, connectWallet, currentAccount, showNavBar, setShowNavBar }}>
            {children}
        </CartContext.Provider>
    );
}